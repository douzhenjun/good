// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.13.0
// source: deploy.proto

package config

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type STATE int32

const (
	STATE_UNKNOWN     STATE = 0
	STATE_PENDING     STATE = 1
	STATE_RUNNING     STATE = 2
	STATE_COMPLETE    STATE = 3
	STATE_STOPPED     STATE = 4
	STATE_TIMEOUT     STATE = 6
	STATE_SSHNETFAIL  STATE = 7
	STATE_TASKFAIL    STATE = 8
	STATE_TASKNOEXIST STATE = 9
)

// Enum value maps for STATE.
var (
	STATE_name = map[int32]string{
		0: "UNKNOWN",
		1: "PENDING",
		2: "RUNNING",
		3: "COMPLETE",
		4: "STOPPED",
		6: "TIMEOUT",
		7: "SSHNETFAIL",
		8: "TASKFAIL",
		9: "TASKNOEXIST",
	}
	STATE_value = map[string]int32{
		"UNKNOWN":     0,
		"PENDING":     1,
		"RUNNING":     2,
		"COMPLETE":    3,
		"STOPPED":     4,
		"TIMEOUT":     6,
		"SSHNETFAIL":  7,
		"TASKFAIL":    8,
		"TASKNOEXIST": 9,
	}
)

func (x STATE) Enum() *STATE {
	p := new(STATE)
	*p = x
	return p
}

func (x STATE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (STATE) Descriptor() protoreflect.EnumDescriptor {
	return file_deploy_proto_enumTypes[0].Descriptor()
}

func (STATE) Type() protoreflect.EnumType {
	return &file_deploy_proto_enumTypes[0]
}

func (x STATE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use STATE.Descriptor instead.
func (STATE) EnumDescriptor() ([]byte, []int) {
	return file_deploy_proto_rawDescGZIP(), []int{0}
}

type TaskDeployAgent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IPorHostName string   `protobuf:"bytes,1,opt,name=IPorHostName,proto3" json:"IPorHostName,omitempty"` //hostname or ip
	User         string   `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty"`
	Password     string   `protobuf:"bytes,3,opt,name=password,proto3" json:"password,omitempty"`
	Tags         []string `protobuf:"bytes,4,rep,name=Tags,proto3" json:"Tags,omitempty"`
	Port         int32    `protobuf:"varint,5,opt,name=Port,proto3" json:"Port,omitempty"` //default = common.PortOfSysSSH
}

func (x *TaskDeployAgent) Reset() {
	*x = TaskDeployAgent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deploy_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskDeployAgent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskDeployAgent) ProtoMessage() {}

func (x *TaskDeployAgent) ProtoReflect() protoreflect.Message {
	mi := &file_deploy_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskDeployAgent.ProtoReflect.Descriptor instead.
func (*TaskDeployAgent) Descriptor() ([]byte, []int) {
	return file_deploy_proto_rawDescGZIP(), []int{0}
}

func (x *TaskDeployAgent) GetIPorHostName() string {
	if x != nil {
		return x.IPorHostName
	}
	return ""
}

func (x *TaskDeployAgent) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *TaskDeployAgent) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *TaskDeployAgent) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *TaskDeployAgent) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

type TaskCommandLine struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExecHost string   `protobuf:"bytes,1,opt,name=ExecHost,proto3" json:"ExecHost,omitempty"`
	CmdLine  string   `protobuf:"bytes,2,opt,name=CmdLine,proto3" json:"CmdLine,omitempty"`
	Timeout  int64    `protobuf:"varint,3,opt,name=timeout,proto3" json:"timeout,omitempty"`
	Tags     []string `protobuf:"bytes,4,rep,name=Tags,proto3" json:"Tags,omitempty"`
}

func (x *TaskCommandLine) Reset() {
	*x = TaskCommandLine{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deploy_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskCommandLine) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskCommandLine) ProtoMessage() {}

func (x *TaskCommandLine) ProtoReflect() protoreflect.Message {
	mi := &file_deploy_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskCommandLine.ProtoReflect.Descriptor instead.
func (*TaskCommandLine) Descriptor() ([]byte, []int) {
	return file_deploy_proto_rawDescGZIP(), []int{1}
}

func (x *TaskCommandLine) GetExecHost() string {
	if x != nil {
		return x.ExecHost
	}
	return ""
}

func (x *TaskCommandLine) GetCmdLine() string {
	if x != nil {
		return x.CmdLine
	}
	return ""
}

func (x *TaskCommandLine) GetTimeout() int64 {
	if x != nil {
		return x.Timeout
	}
	return 0
}

func (x *TaskCommandLine) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

type TaskScpFile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RemoteHost string   `protobuf:"bytes,1,opt,name=RemoteHost,proto3" json:"RemoteHost,omitempty"`
	SrcFile    string   `protobuf:"bytes,2,opt,name=SrcFile,proto3" json:"SrcFile,omitempty"`
	DstFile    string   `protobuf:"bytes,3,opt,name=DstFile,proto3" json:"DstFile,omitempty"`
	Timeout    int64    `protobuf:"varint,4,opt,name=timeout,proto3" json:"timeout,omitempty"`
	Tags       []string `protobuf:"bytes,5,rep,name=tags,proto3" json:"tags,omitempty"`
}

func (x *TaskScpFile) Reset() {
	*x = TaskScpFile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deploy_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskScpFile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskScpFile) ProtoMessage() {}

func (x *TaskScpFile) ProtoReflect() protoreflect.Message {
	mi := &file_deploy_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskScpFile.ProtoReflect.Descriptor instead.
func (*TaskScpFile) Descriptor() ([]byte, []int) {
	return file_deploy_proto_rawDescGZIP(), []int{2}
}

func (x *TaskScpFile) GetRemoteHost() string {
	if x != nil {
		return x.RemoteHost
	}
	return ""
}

func (x *TaskScpFile) GetSrcFile() string {
	if x != nil {
		return x.SrcFile
	}
	return ""
}

func (x *TaskScpFile) GetDstFile() string {
	if x != nil {
		return x.DstFile
	}
	return ""
}

func (x *TaskScpFile) GetTimeout() int64 {
	if x != nil {
		return x.Timeout
	}
	return 0
}

func (x *TaskScpFile) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

type ID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID string `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *ID) Reset() {
	*x = ID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deploy_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ID) ProtoMessage() {}

func (x *ID) ProtoReflect() protoreflect.Message {
	mi := &file_deploy_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ID.ProtoReflect.Descriptor instead.
func (*ID) Descriptor() ([]byte, []int) {
	return file_deploy_proto_rawDescGZIP(), []int{3}
}

func (x *ID) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

type Status struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID        string `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	State     string `protobuf:"bytes,2,opt,name=State,proto3" json:"State,omitempty"`
	StartTime int64  `protobuf:"varint,3,opt,name=StartTime,proto3" json:"StartTime,omitempty"`
	StopTime  int64  `protobuf:"varint,4,opt,name=StopTime,proto3" json:"StopTime,omitempty"`
	Stdout    string `protobuf:"bytes,5,opt,name=Stdout,proto3" json:"Stdout,omitempty"`
	Stderr    string `protobuf:"bytes,6,opt,name=Stderr,proto3" json:"Stderr,omitempty"`
	ExitCode  int32  `protobuf:"varint,7,opt,name=ExitCode,proto3" json:"ExitCode,omitempty"`
	TaskErr   string `protobuf:"bytes,8,opt,name=TaskErr,proto3" json:"TaskErr,omitempty"`
}

func (x *Status) Reset() {
	*x = Status{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deploy_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Status) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Status) ProtoMessage() {}

func (x *Status) ProtoReflect() protoreflect.Message {
	mi := &file_deploy_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Status.ProtoReflect.Descriptor instead.
func (*Status) Descriptor() ([]byte, []int) {
	return file_deploy_proto_rawDescGZIP(), []int{4}
}

func (x *Status) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *Status) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *Status) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *Status) GetStopTime() int64 {
	if x != nil {
		return x.StopTime
	}
	return 0
}

func (x *Status) GetStdout() string {
	if x != nil {
		return x.Stdout
	}
	return ""
}

func (x *Status) GetStderr() string {
	if x != nil {
		return x.Stderr
	}
	return ""
}

func (x *Status) GetExitCode() int32 {
	if x != nil {
		return x.ExitCode
	}
	return 0
}

func (x *Status) GetTaskErr() string {
	if x != nil {
		return x.TaskErr
	}
	return ""
}

var File_deploy_proto protoreflect.FileDescriptor

var file_deploy_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x8d, 0x01, 0x0a, 0x0f, 0x54, 0x61, 0x73, 0x6b, 0x44,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x49, 0x50,
	0x6f, 0x72, 0x48, 0x6f, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x49, 0x50, 0x6f, 0x72, 0x48, 0x6f, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x73,
	0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x54, 0x61, 0x67, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x54, 0x61,
	0x67, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x50, 0x6f, 0x72, 0x74, 0x22, 0x75, 0x0a, 0x0f, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x4c, 0x69, 0x6e, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x45, 0x78, 0x65,
	0x63, 0x48, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x45, 0x78, 0x65,
	0x63, 0x48, 0x6f, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x6d, 0x64, 0x4c, 0x69, 0x6e, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x43, 0x6d, 0x64, 0x4c, 0x69, 0x6e, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x61, 0x67,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x54, 0x61, 0x67, 0x73, 0x22, 0x8f, 0x01,
	0x0a, 0x0b, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x63, 0x70, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x1e, 0x0a,
	0x0a, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x12, 0x18, 0x0a,
	0x07, 0x53, 0x72, 0x63, 0x46, 0x69, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x53, 0x72, 0x63, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x44, 0x73, 0x74, 0x46, 0x69,
	0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x44, 0x73, 0x74, 0x46, 0x69, 0x6c,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x61, 0x67, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x22,
	0x14, 0x0a, 0x02, 0x49, 0x44, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x49, 0x44, 0x22, 0xce, 0x01, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44,
	0x12, 0x14, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x74, 0x6f, 0x70, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x53, 0x74, 0x6f, 0x70, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x53, 0x74, 0x64, 0x6f, 0x75, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x53, 0x74, 0x64, 0x6f, 0x75, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x74, 0x64, 0x65,
	0x72, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x53, 0x74, 0x64, 0x65, 0x72, 0x72,
	0x12, 0x1a, 0x0a, 0x08, 0x45, 0x78, 0x69, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x45, 0x78, 0x69, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x54, 0x61, 0x73, 0x6b, 0x45, 0x72, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x54,
	0x61, 0x73, 0x6b, 0x45, 0x72, 0x72, 0x2a, 0x85, 0x01, 0x0a, 0x05, 0x53, 0x54, 0x41, 0x54, 0x45,
	0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0b, 0x0a,
	0x07, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x55,
	0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x4f, 0x4d, 0x50, 0x4c,
	0x45, 0x54, 0x45, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x54, 0x4f, 0x50, 0x50, 0x45, 0x44,
	0x10, 0x04, 0x12, 0x0b, 0x0a, 0x07, 0x54, 0x49, 0x4d, 0x45, 0x4f, 0x55, 0x54, 0x10, 0x06, 0x12,
	0x0e, 0x0a, 0x0a, 0x53, 0x53, 0x48, 0x4e, 0x45, 0x54, 0x46, 0x41, 0x49, 0x4c, 0x10, 0x07, 0x12,
	0x0c, 0x0a, 0x08, 0x54, 0x41, 0x53, 0x4b, 0x46, 0x41, 0x49, 0x4c, 0x10, 0x08, 0x12, 0x0f, 0x0a,
	0x0b, 0x54, 0x41, 0x53, 0x4b, 0x4e, 0x4f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x10, 0x09, 0x32, 0xfe,
	0x01, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x34, 0x0a, 0x0b, 0x44, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x17, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x41, 0x67, 0x65, 0x6e,
	0x74, 0x1a, 0x0a, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x49, 0x44, 0x22, 0x00, 0x12,
	0x39, 0x0a, 0x10, 0x52, 0x75, 0x6e, 0x43, 0x6d, 0x64, 0x4c, 0x69, 0x6e, 0x65, 0x4e, 0x6f, 0x57,
	0x61, 0x69, 0x74, 0x12, 0x17, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54, 0x61, 0x73,
	0x6b, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x4c, 0x69, 0x6e, 0x65, 0x1a, 0x0a, 0x2e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x49, 0x44, 0x22, 0x00, 0x12, 0x32, 0x0a, 0x0d, 0x53, 0x63,
	0x70, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x6f, 0x57, 0x61, 0x69, 0x74, 0x12, 0x13, 0x2e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x63, 0x70, 0x46, 0x69, 0x6c, 0x65,
	0x1a, 0x0a, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x49, 0x44, 0x22, 0x00, 0x12, 0x29,
	0x0a, 0x09, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0a, 0x2e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x49, 0x44, 0x1a, 0x0e, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x00, 0x12, 0x24, 0x0a, 0x04, 0x57, 0x61, 0x69,
	0x74, 0x12, 0x0a, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x49, 0x44, 0x1a, 0x0e, 0x2e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x00, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_deploy_proto_rawDescOnce sync.Once
	file_deploy_proto_rawDescData = file_deploy_proto_rawDesc
)

func file_deploy_proto_rawDescGZIP() []byte {
	file_deploy_proto_rawDescOnce.Do(func() {
		file_deploy_proto_rawDescData = protoimpl.X.CompressGZIP(file_deploy_proto_rawDescData)
	})
	return file_deploy_proto_rawDescData
}

var file_deploy_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_deploy_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_deploy_proto_goTypes = []interface{}{
	(STATE)(0),              // 0: configs.STATE
	(*TaskDeployAgent)(nil), // 1: configs.TaskDeployAgent
	(*TaskCommandLine)(nil), // 2: configs.TaskCommandLine
	(*TaskScpFile)(nil),     // 3: configs.TaskScpFile
	(*ID)(nil),              // 4: configs.ID
	(*Status)(nil),          // 5: configs.Status
}
var file_deploy_proto_depIdxs = []int32{
	1, // 0: configs.Config.DeployAgent:input_type -> configs.TaskDeployAgent
	2, // 1: configs.Config.RunCmdLineNoWait:input_type -> configs.TaskCommandLine
	3, // 2: configs.Config.ScpFileNoWait:input_type -> configs.TaskScpFile
	4, // 3: configs.Config.GetStatus:input_type -> configs.ID
	4, // 4: configs.Config.Wait:input_type -> configs.ID
	4, // 5: configs.Config.DeployAgent:output_type -> configs.ID
	4, // 6: configs.Config.RunCmdLineNoWait:output_type -> configs.ID
	4, // 7: configs.Config.ScpFileNoWait:output_type -> configs.ID
	5, // 8: configs.Config.GetStatus:output_type -> configs.Status
	5, // 9: configs.Config.Wait:output_type -> configs.Status
	5, // [5:10] is the sub-list for method output_type
	0, // [0:5] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_deploy_proto_init() }
func file_deploy_proto_init() {
	if File_deploy_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_deploy_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskDeployAgent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deploy_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskCommandLine); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deploy_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskScpFile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deploy_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deploy_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Status); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_deploy_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_deploy_proto_goTypes,
		DependencyIndexes: file_deploy_proto_depIdxs,
		EnumInfos:         file_deploy_proto_enumTypes,
		MessageInfos:      file_deploy_proto_msgTypes,
	}.Build()
	File_deploy_proto = out.File
	file_deploy_proto_rawDesc = nil
	file_deploy_proto_goTypes = nil
	file_deploy_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ConfigClient is the client API for Config service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ConfigClient interface {
	// 主机初始化时,下发agent
	DeployAgent(ctx context.Context, in *TaskDeployAgent, opts ...grpc.CallOption) (*ID, error)
	// 执行单行命令
	RunCmdLineNoWait(ctx context.Context, in *TaskCommandLine, opts ...grpc.CallOption) (*ID, error)
	// 拷贝文件
	ScpFileNoWait(ctx context.Context, in *TaskScpFile, opts ...grpc.CallOption) (*ID, error)
	// 查看任务执行状态
	GetStatus(ctx context.Context, in *ID, opts ...grpc.CallOption) (*Status, error)
	// 等待
	Wait(ctx context.Context, in *ID, opts ...grpc.CallOption) (*Status, error)
}

type configClient struct {
	cc grpc.ClientConnInterface
}

func NewConfigClient(cc grpc.ClientConnInterface) ConfigClient {
	return &configClient{cc}
}

func (c *configClient) DeployAgent(ctx context.Context, in *TaskDeployAgent, opts ...grpc.CallOption) (*ID, error) {
	out := new(ID)
	err := c.cc.Invoke(ctx, "/configs.Config/DeployAgent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) RunCmdLineNoWait(ctx context.Context, in *TaskCommandLine, opts ...grpc.CallOption) (*ID, error) {
	out := new(ID)
	err := c.cc.Invoke(ctx, "/configs.Config/RunCmdLineNoWait", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) ScpFileNoWait(ctx context.Context, in *TaskScpFile, opts ...grpc.CallOption) (*ID, error) {
	out := new(ID)
	err := c.cc.Invoke(ctx, "/configs.Config/ScpFileNoWait", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) GetStatus(ctx context.Context, in *ID, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/configs.Config/GetStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) Wait(ctx context.Context, in *ID, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/configs.Config/Wait", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConfigServer is the server API for Config service.
type ConfigServer interface {
	// 主机初始化时,下发agent
	DeployAgent(context.Context, *TaskDeployAgent) (*ID, error)
	// 执行单行命令
	RunCmdLineNoWait(context.Context, *TaskCommandLine) (*ID, error)
	// 拷贝文件
	ScpFileNoWait(context.Context, *TaskScpFile) (*ID, error)
	// 查看任务执行状态
	GetStatus(context.Context, *ID) (*Status, error)
	// 等待
	Wait(context.Context, *ID) (*Status, error)
}

// UnimplementedConfigServer can be embedded to have forward compatible implementations.
type UnimplementedConfigServer struct {
}

func (*UnimplementedConfigServer) DeployAgent(context.Context, *TaskDeployAgent) (*ID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeployAgent not implemented")
}
func (*UnimplementedConfigServer) RunCmdLineNoWait(context.Context, *TaskCommandLine) (*ID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunCmdLineNoWait not implemented")
}
func (*UnimplementedConfigServer) ScpFileNoWait(context.Context, *TaskScpFile) (*ID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ScpFileNoWait not implemented")
}
func (*UnimplementedConfigServer) GetStatus(context.Context, *ID) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStatus not implemented")
}
func (*UnimplementedConfigServer) Wait(context.Context, *ID) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Wait not implemented")
}

func RegisterConfigServer(s *grpc.Server, srv ConfigServer) {
	s.RegisterService(&_Config_serviceDesc, srv)
}

func _Config_DeployAgent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskDeployAgent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).DeployAgent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/configs.Config/DeployAgent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).DeployAgent(ctx, req.(*TaskDeployAgent))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_RunCmdLineNoWait_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskCommandLine)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).RunCmdLineNoWait(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/configs.Config/RunCmdLineNoWait",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).RunCmdLineNoWait(ctx, req.(*TaskCommandLine))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_ScpFileNoWait_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskScpFile)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).ScpFileNoWait(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/configs.Config/ScpFileNoWait",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).ScpFileNoWait(ctx, req.(*TaskScpFile))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_GetStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).GetStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/configs.Config/GetStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).GetStatus(ctx, req.(*ID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_Wait_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).Wait(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/configs.Config/Wait",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).Wait(ctx, req.(*ID))
	}
	return interceptor(ctx, in, info, handler)
}

var _Config_serviceDesc = grpc.ServiceDesc{
	ServiceName: "configs.Config",
	HandlerType: (*ConfigServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DeployAgent",
			Handler:    _Config_DeployAgent_Handler,
		},
		{
			MethodName: "RunCmdLineNoWait",
			Handler:    _Config_RunCmdLineNoWait_Handler,
		},
		{
			MethodName: "ScpFileNoWait",
			Handler:    _Config_ScpFileNoWait_Handler,
		},
		{
			MethodName: "GetStatus",
			Handler:    _Config_GetStatus_Handler,
		},
		{
			MethodName: "Wait",
			Handler:    _Config_Wait_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "deploy.proto",
}
